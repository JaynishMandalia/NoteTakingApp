//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoteTakingClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.INoteTakingService")]
    public interface INoteTakingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/AddNote", ReplyAction="http://tempuri.org/INoteTakingService/AddNoteResponse")]
        bool AddNote(NoteTakingApp.NoteTaking nt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/AddNote", ReplyAction="http://tempuri.org/INoteTakingService/AddNoteResponse")]
        System.Threading.Tasks.Task<bool> AddNoteAsync(NoteTakingApp.NoteTaking nt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/DeleteNote", ReplyAction="http://tempuri.org/INoteTakingService/DeleteNoteResponse")]
        bool DeleteNote(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/DeleteNote", ReplyAction="http://tempuri.org/INoteTakingService/DeleteNoteResponse")]
        System.Threading.Tasks.Task<bool> DeleteNoteAsync(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/GetNotes", ReplyAction="http://tempuri.org/INoteTakingService/GetNotesResponse")]
        System.Data.DataSet GetNotes(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/GetNotes", ReplyAction="http://tempuri.org/INoteTakingService/GetNotesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNotesAsync(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/UpdateNote", ReplyAction="http://tempuri.org/INoteTakingService/UpdateNoteResponse")]
        bool UpdateNote(NoteTakingApp.NoteTaking nt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteTakingService/UpdateNote", ReplyAction="http://tempuri.org/INoteTakingService/UpdateNoteResponse")]
        System.Threading.Tasks.Task<bool> UpdateNoteAsync(NoteTakingApp.NoteTaking nt);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INoteTakingServiceChannel : NoteTakingClient.ServiceReference1.INoteTakingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NoteTakingServiceClient : System.ServiceModel.ClientBase<NoteTakingClient.ServiceReference1.INoteTakingService>, NoteTakingClient.ServiceReference1.INoteTakingService {
        
        public NoteTakingServiceClient() {
        }
        
        public NoteTakingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NoteTakingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteTakingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteTakingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddNote(NoteTakingApp.NoteTaking nt) {
            return base.Channel.AddNote(nt);
        }
        
        public System.Threading.Tasks.Task<bool> AddNoteAsync(NoteTakingApp.NoteTaking nt) {
            return base.Channel.AddNoteAsync(nt);
        }
        
        public bool DeleteNote(int PersonID) {
            return base.Channel.DeleteNote(PersonID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteNoteAsync(int PersonID) {
            return base.Channel.DeleteNoteAsync(PersonID);
        }
        
        public System.Data.DataSet GetNotes(int PersonID) {
            return base.Channel.GetNotes(PersonID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNotesAsync(int PersonID) {
            return base.Channel.GetNotesAsync(PersonID);
        }
        
        public bool UpdateNote(NoteTakingApp.NoteTaking nt) {
            return base.Channel.UpdateNote(nt);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNoteAsync(NoteTakingApp.NoteTaking nt) {
            return base.Channel.UpdateNoteAsync(nt);
        }
    }
}
